/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VestingERC20Interface extends ethers.utils.Interface {
  functions: {
    "beneficiary()": FunctionFragment;
    "changeBeneficiary(address)": FunctionFragment;
    "cliff()": FunctionFragment;
    "duration()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,bool,address,bool)": FunctionFragment;
    "initialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "publicReleasable()": FunctionFragment;
    "releasableAmount()": FunctionFragment;
    "release()": FunctionFragment;
    "releaseForeignToken(address,uint256)": FunctionFragment;
    "released()": FunctionFragment;
    "revocable()": FunctionFragment;
    "revoke()": FunctionFragment;
    "revoked()": FunctionFragment;
    "start()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestedAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicReleasable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseForeignToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "released", values?: undefined): string;
  encodeFunctionData(functionFragment: "revocable", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoked", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicReleasable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revocable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(uint256)": EventFragment;
    "Revoked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export class VestingERC20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VestingERC20Interface;

  functions: {
    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    "beneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    changeBeneficiary(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeBeneficiary(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cliff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "duration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,uint256,bool,address,bool)"(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    publicReleasable(overrides?: CallOverrides): Promise<[boolean]>;

    "publicReleasable()"(overrides?: CallOverrides): Promise<[boolean]>;

    releasableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "releasableAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    release(overrides?: Overrides): Promise<ContractTransaction>;

    "release()"(overrides?: Overrides): Promise<ContractTransaction>;

    releaseForeignToken(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "releaseForeignToken(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    released(overrides?: CallOverrides): Promise<[BigNumber]>;

    "released()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    revocable(overrides?: CallOverrides): Promise<[boolean]>;

    "revocable()"(overrides?: CallOverrides): Promise<[boolean]>;

    revoke(overrides?: Overrides): Promise<ContractTransaction>;

    "revoke()"(overrides?: Overrides): Promise<ContractTransaction>;

    revoked(overrides?: CallOverrides): Promise<[boolean]>;

    "revoked()"(overrides?: CallOverrides): Promise<[boolean]>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    "start()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vestedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vestedAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  beneficiary(overrides?: CallOverrides): Promise<string>;

  "beneficiary()"(overrides?: CallOverrides): Promise<string>;

  changeBeneficiary(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeBeneficiary(address)"(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cliff(overrides?: CallOverrides): Promise<BigNumber>;

  "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _owner: string,
    _beneficiary: string,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    _revocable: boolean,
    _token: string,
    _publicReleasable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,uint256,bool,address,bool)"(
    _owner: string,
    _beneficiary: string,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    _revocable: boolean,
    _token: string,
    _publicReleasable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  publicReleasable(overrides?: CallOverrides): Promise<boolean>;

  "publicReleasable()"(overrides?: CallOverrides): Promise<boolean>;

  releasableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "releasableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  release(overrides?: Overrides): Promise<ContractTransaction>;

  "release()"(overrides?: Overrides): Promise<ContractTransaction>;

  releaseForeignToken(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "releaseForeignToken(address,uint256)"(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  released(overrides?: CallOverrides): Promise<BigNumber>;

  "released()"(overrides?: CallOverrides): Promise<BigNumber>;

  revocable(overrides?: CallOverrides): Promise<boolean>;

  "revocable()"(overrides?: CallOverrides): Promise<boolean>;

  revoke(overrides?: Overrides): Promise<ContractTransaction>;

  "revoke()"(overrides?: Overrides): Promise<ContractTransaction>;

  revoked(overrides?: CallOverrides): Promise<boolean>;

  "revoked()"(overrides?: CallOverrides): Promise<boolean>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  "start()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "vestedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    beneficiary(overrides?: CallOverrides): Promise<string>;

    "beneficiary()"(overrides?: CallOverrides): Promise<string>;

    changeBeneficiary(target: string, overrides?: CallOverrides): Promise<void>;

    "changeBeneficiary(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,uint256,bool,address,bool)"(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    publicReleasable(overrides?: CallOverrides): Promise<boolean>;

    "publicReleasable()"(overrides?: CallOverrides): Promise<boolean>;

    releasableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "releasableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    release(overrides?: CallOverrides): Promise<void>;

    "release()"(overrides?: CallOverrides): Promise<void>;

    releaseForeignToken(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "releaseForeignToken(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    "released()"(overrides?: CallOverrides): Promise<BigNumber>;

    revocable(overrides?: CallOverrides): Promise<boolean>;

    "revocable()"(overrides?: CallOverrides): Promise<boolean>;

    revoke(overrides?: CallOverrides): Promise<void>;

    "revoke()"(overrides?: CallOverrides): Promise<void>;

    revoked(overrides?: CallOverrides): Promise<boolean>;

    "revoked()"(overrides?: CallOverrides): Promise<boolean>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "vestedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Released(amount: null): EventFilter;

    Revoked(): EventFilter;
  };

  estimateGas: {
    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeBeneficiary(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeBeneficiary(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,uint256,bool,address,bool)"(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicReleasable(overrides?: CallOverrides): Promise<BigNumber>;

    "publicReleasable()"(overrides?: CallOverrides): Promise<BigNumber>;

    releasableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "releasableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    release(overrides?: Overrides): Promise<BigNumber>;

    "release()"(overrides?: Overrides): Promise<BigNumber>;

    releaseForeignToken(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "releaseForeignToken(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    "released()"(overrides?: CallOverrides): Promise<BigNumber>;

    revocable(overrides?: CallOverrides): Promise<BigNumber>;

    "revocable()"(overrides?: CallOverrides): Promise<BigNumber>;

    revoke(overrides?: Overrides): Promise<BigNumber>;

    "revoke()"(overrides?: Overrides): Promise<BigNumber>;

    revoked(overrides?: CallOverrides): Promise<BigNumber>;

    "revoked()"(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "vestedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beneficiary()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBeneficiary(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeBeneficiary(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cliff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,uint256,bool,address,bool)"(
      _owner: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _revocable: boolean,
      _token: string,
      _publicReleasable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicReleasable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "publicReleasable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releasableAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "releasableAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(overrides?: Overrides): Promise<PopulatedTransaction>;

    "release()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    releaseForeignToken(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "releaseForeignToken(address,uint256)"(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "released()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revocable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "revocable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revoke(overrides?: Overrides): Promise<PopulatedTransaction>;

    "revoke()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revoked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "revoked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vestedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vestedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
